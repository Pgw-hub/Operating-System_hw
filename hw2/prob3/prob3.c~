#include <stdio.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>


#define MAX_PATH 256
#define MAX_RESULT 100

void FindLargestFile(char *start_dir, char *largest, long *size);

int main(int argc, char *argv[]) {
    if(argc < 2){
        printf("Usage: %s <start_dir>\n", argv[0]); return 0;
    }
    char *start_dir = argv[1];
    char largest[MAX_PATH] = "";
    long size = 0L; // the initial value of size should be zero
	FindLargestFile(start_dir, largest, &size);
    if(size > 0)
        printf("largest file = %s, size = %ld\n", largest, size);
    else
        printf("no file with size > 0.\n");
    return 0;
}


void FindLargestFile(char *start_dir, char *largest, long *size){
	DIR* dp  = NULL;
	struct dirent* entry = NULL;
	struct stat buf;
	
	if((dp = opendir(start_dir)) == NULL){
		printf("fail wandering directory at %s",start_dir);
	}
	else{
		printf("open success\n");
	}

	while((entry = readdir(dp)) != NULL){
		lstat(entry -> d_name,&buf);

		if(S_ISDIR(buf.st_mode)){
			if(!strcmp(".",entry->d_name && !strcmp("..",entry->d_name)){//not same with . , ..
				strcat(start_dir,'/');
				strcat(start_dir,entry -> name);
				FindLargestFile(start_dir,largest,&size);
			}	
		}
		else if(S_ISREG(buf.st_mode)){
			//largest 찾고 바꿔주고
			//largest size 바꿔기
		}
	}
}








